server:
  port: 8081

spring:
  application:
    name: produit-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/produit_db}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  cache:
    redis:
      time-to-live: 60000

  kafka:
    template:
      default-topic: ${KAFKA_TOPIC:commande-events}
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: ${GROUP_ID:produit-group}
      properties:
        spring:
          json:
            type:
              mapping: order-event:com.msproduit.event.CommandePlacedEvent

springdoc:
  swagger-ui:
    path: /api/docs

# prometheus
management:
  endpoints:
    web:
      exposure:
        include: ["health", "metrics", "prometheus"]
    endpoint:
      metrics:
        enabled: true
      health:
        show-details: always
      prometheus:
        enabled: true
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      format_sql: true
      properties:
        hibernate:
          use_sql_comments: true
          cache:
            use_second_level_cache: false
            use_query_cache: false
#
#logging:
#  config: classpath:log4j2.xml.old
#  level:
#    org:
#      hibernate:
#        SQL: DEBUG
#      springframework:
#        web: DEBUG
#        data: DEBUG
#      boot:
#        autoconfigure:
#          data:
#            rest: DEBUG
#            jpa: DEBUG
#            orm: DEBUG

