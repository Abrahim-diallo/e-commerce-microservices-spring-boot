version: "3.8"

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: main_db
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9093:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  api-gateway:
    build: ./api-gateway
    image: dialloabrahim/api-gateway:v1
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - ms-commande-service
      - ms-produit-service
      - ms-paiement-service
      - ms-customer-service
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  ms-produit-service:
    build: ./produit-service
    image: dialloabrahim/ms-produit-service:v1
    container_name: produit-service
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/produit_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: order-events
      GROUP_ID: product-group
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ms-produit-service

  ms-commande-service:
    build: ./commande-service
    image: dialloabrahim/ms-commande-service:v1
    container_name: commande-service
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/commande_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: order-events
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ms-commande-service

  ms-paiement-service:
    build: ./paiement-service
    image: dialloabrahim/ms-paiement-service:v1
    container_name: paiement-service
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/paiement_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: payment-events
      KAFKA_GROUP_ID: payment-group
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - ms-paiement-service

  ms-customer-service:
    build: ./customer-service
    image: dialloabrahim/ms-customer-service:v1
    container_name: customer-service
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/customer_db # Utilisation de PostgreSQL
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - postgres
      - redis
    networks:
      - ms-customer-service

  ms-notification-service:
    build: ./notification-service
    image: dialloabrahim/ms-notification-service:v1
    container_name: notification-service
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: local
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: payment-events
      KAFKA_GROUP_ID: payment-group
    depends_on:
      - kafka
    networks:
      - ms-notification-service

  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2-amd64
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.2-amd64
    container_name: logstash
    ports:
      - "5044:5044"
      - "5000/tcp"
      - "5000/udp"
      - "9600:9600"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.2-amd64
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - ms-commande-service
      - ms-produit-service
      - ms-customer-service
      - ms-paiement-service

networks:
  ms-commande-service:
    driver: bridge
  ms-produit-service:
    driver: bridge
  ms-customer-service:
    driver: bridge
  ms-paiement-service:
    driver: bridge